# мы говорим Docker включить в наш образ всю функциональность из образа node:16-alpine.
FROM node:16-alpine

# Это указывает Docker использовать этот путь в качестве местоположения по умолчанию для всех
# последующих команд. Таким образом, нам не нужно вводить полные пути к файлам,
# но мы можем использовать относительные пути на основе рабочего каталога
WORKDIR /app

# Мы скопируем package.json и файл package-lock.json в наш рабочий каталог /app.
COPY ["package.json", "package-lock.json*", "./"]

# устанавливаем зависимости, исключая devDependecies
RUN npm install --production

# На данный момент у нас есть образ, основанный на версии Node 16,
# и мы установили наши зависимости.
# Следующее, что нам нужно сделать, это добавить наш исходный код в изображение.
# Команда COPY берет все файлы, находящиеся в текущем каталоге, и копирует их в образ.
COPY . .

# EXPOSE 3000 - эта команда в твоей конфигурации указывает, какой порт запускается
# в случае с веб-сервером эта строчка должна быть такой, поскольку
# на веб-сервере на фронт будет приходить запрос на 80й порт?
EXPOSE 3000 80

# запускаем скрипт, который создает статику "predeploy": "npm run build" > "react-scripts build"
RUN npm run predeploy

# CMD ["npm","run", "start"] - эта команда как раз запускала сервер локально в режиме dtvtlopment,
# соответственно, если я должна отдавать статику наружу, то данная строка будет такой?
CMD cp -r build result_build

# копирование из папки build в папку result_build, а далее из папки result_build
# снаружи можно забирать статику?
